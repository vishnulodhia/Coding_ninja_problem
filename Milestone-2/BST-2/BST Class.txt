BST Class
Send Feedback
Implement the BST class which includes following functions -
1. insert -
Given an element, insert that element in the BST at the correct position. If element is equal to the data of the node, insert it in the left subtree.
2. search
Given an element, find if that is present in BST or not. Return true or false.
3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
4. printTree (recursive) -
Print the BST in in the following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y
where, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.


import java.util.*;
public class BinarySearchTree {
    
   public BinaryTreeNode<Integer> root  = null;
    
    
    
    private BinaryTreeNode<Integer> insert(BinaryTreeNode<Integer> root ,int data ){
        
        if(root==null){
            BinaryTreeNode<Integer> newNode = new BinaryTreeNode<Integer>(data);
            return newNode;
        }
        
        
        
        if(root.data>=data)    
        root.left = insert(root.left,data);
        
        else
        root.right = insert(root.right,data);
        
        return root;
        
    }
    
	public void insert(int data) {
		
        root = insert(root,data);
        return;
	}
	
    
    
    
    
private BinaryTreeNode<Integer> remove(BinaryTreeNode<Integer> root,int data){
    
    if(root==null)
    return null;
    
    if(root.data>data)
    root.left = remove(root.left,data);
    
    if(root.data<data)
    root.right = remove(root.right,data);
    
    
   if(root.data == data && root.left==null && root.right == null)
       return null;
    
   if(root.data == data && root.left!=null && root.right==null)
       return root.left;
    
  if(root.data == data && root.right!=null && root.left==null)
       return root.right;  
    
   else{
       BinaryTreeNode<Integer> temp = root.right;
       
       while(temp.left!=null)
       temp = temp.left;
       
       root.data = temp.data;
       root.right =  remove(root.right,temp.data);
   }
        
    
    return root;
    
}    
    
    
	public void remove(int data) {
		
        root =  remove(root,data); 
        return;
	}
	
    private static void printLevelWise(BinaryTreeNode<Integer> root) {
		//Your code goes here
       if(root==null)
           return;
        String s= "";
        s= s + Integer.toString(root.data) + ":";
        
        if(root.left!=null){
            s = s + "L:" + Integer.toString(root.left.data)+",";
        }
        
        if(root.right!=null){
             s = s + "R:" + Integer.toString(root.right.data);
        }
        
        System.out.println(s);
        printLevelWise(root.left);
        printLevelWise(root.right);
        
	}
                            
    public void printTree(){
        
        printLevelWise(root);
    
    }
	
                                            
    private boolean search(BinaryTreeNode<Integer> root ,int data){

         if(root==null)
        return false;
        
        if(root.data == data)
            return true;
        
        if(root.data>data)
           return search(root.left,data);
        
        else
          return search(root.right,data);  
        
        
    }                                        
                                            
    
	public boolean search(int data) {
        return search(root,data);
	}
	

}
