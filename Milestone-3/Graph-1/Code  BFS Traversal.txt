Code : BFS Traversal
Send Feedback
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2


import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;

public class Solution {

public static void helper(int edge[][],int sv,boolean vesited [] ){
vesited[sv] = true;
Queue<Integer> q = new LinkedList<>();
q.add(sv);

while(!q.isEmpty()){
int front = q.remove();
System.out.print(front+" ");
for(int i=0;i<edge.length;i++){

if()

	if(edge[front][i]==1 && !vesited[i]){
		q.add(i);
		vesited[i] = true;
	}
}


}

}
public static void printbfs(int edge[][]){

boolean  vesited[] =  new boolean[edge.length];

for(int i=0;i<edge.length;i++){

	if(!vesited[i]){
    helper(edge,i, vesited);
	}
}

}



	public static void main(String[] args) throws NumberFormatException, IOException {
        int n,e;
		Scanner s= new Scanner(System.in);
		n = s.nextInt();
		e =s.nextInt();
		int edge[][] =  new int[n][n];

      for(int i=0;i<e;i++){
       int v1 = s.nextInt();
	   int v2 = s.nextInt();
	   edge[v1][v2] = 1;
	   edge[v2][v1] = 1;
	  }
    printbfs(edge);
      
	}

}

