Quick Sort Code

Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)

Output format :
Array elements in increasing order (separated by space)

Constraints :
1 <= n <= 10^3

Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8

Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7


/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
	  public static int partition(int []input,int start,int end){
        int pivort = end;
        int i=start-1;
          int j;
        int temp;
        
        for( j= start;j<end;j++){
            
            
            
            if(input[j]<input[pivort]){
                i++;
                temp=input[i];
                input[i]= input[j];
                input[j]=temp;
            }
            
            
            
            
        }
                temp=input[i+1];
                input[i+1]= input[pivort];
                input[pivort]=temp;
          


return i+1;
        
        
        
    }
    
    public static void quick(int []input,int start,int end){
        
        if(start<end){
            
            int pivortpos = partition(input,start,end);
            
            quick(input,start,pivortpos-1);
            quick(input,pivortpos+1,end);
        }
        
    }
    	
	public static void quickSort(int[] input) {
	
	quick(input,0,input.length-1);
	
		
	}
    
} 